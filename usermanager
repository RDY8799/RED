#!/bin/bash

source /etc/rdy/strings/STRINGS
path="${path}usermanager/"

############ Criar pastas de novos longins

if [ ! -d ${path}users ]
then
mkdir -p ${path}users
fi

if [ ! -d ${path}limit ]
then
mkdir -p /etc/rdy/limit
fi

if [ ! -d ${path}timer ]
then
mkdir -p ${path}timer
fi

if [ ! -d ${path}passwords ]
then
mkdir -p ${path}passwords
fi

if [ ! -d ${path}backups ]
then
mkdir -p ${path}backups
fi


if [ ! -d ${path}date ]
then
mkdir -p ${path}date
fi


RDYNEWUSER(){
echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}GERENCIAMENTO DE USUÁRIOS${blue}/${mag}$NEWUSER$f       $yellow [${blue}v$yellow] $yellow=$f$white Voltar$f";
echo -e $DIVIS
echo -ne "${blue}[1/4]${green}Nome do novo usuário:$f"; read -p "" user
if [[ "$user" = 'v' ]]; then
read -p "Quer mesmo voltar? [s/n]: " esco
if [[ "$esco" = 's' ]]; then
RED
fi
fi
if cat /etc/passwd |grep $user: |grep -vi [a-z]$user |grep -v [0-9]$user > /dev/null
	then
echo -e "\033[4;31mUsuário \033[5;31m$user$f já existe, crie outro usúario.$f"
echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu...$f"; read -n1 -r -p "";
RDYNEWUSER
else
echo -ne "${blue}[2/4]${green}Senha para \033[4;35m$user:$f"; read -p "" password
if [[ "$password" = 'v' ]]; then
read -p "Quer mesmo voltar? [s/n]: " esco
if [[ "$esco" = 's' ]]; then
RED
fi
fi
echo -ne "${blue}[3/4]${green}Dias para expirar:$f"; read -p "" days
if [[ "$days" = 'v' ]]; then
read -p "Quer mesmo voltar? [s/n]: " esco
if [[ "$esco" = 's' ]]; then
RED
fi
fi
echo -ne "${blue}[4/4]${green}Quantidade de logins permitido:$f"; read -p "" logins
if [[ "$logins" = 'v' ]]; then
read -p "Quer mesmo voltar? [s/n]: " esco
if [[ "$esco" = 's' ]]; then
RED
fi
fi

rdyw=$(date '+%C%y-%m-%d' -d " +$days days")
rdyx=$(date "+%d/%m/%Y" -d "+ $days days")
useradd -M -s /bin/false $user -e $rdyw
		(echo $password; echo $password)|passwd $user 2>/dev/null
#limit $user $logins




############  DEFININDO LIMITE


SIFRAO=$

echo "#!/bin/bash" > /etc/rdy/usuarios/$user.sh

echo ""$user"t="$SIFRAO"(ps -u $user |grep 'sshd' |wc -l)" >> /etc/rdy/usuarios/$user.sh

echo "if [ "$SIFRAO""$user"t -gt $2 ]" >> /etc/rdy/usuarios/$user.sh

echo "then" >> /etc/rdy/usuarios/$user.sh

echo $user"pidi="$SIFRAO"(ps -u $user |grep sshd |awk {'print "$SIFRAO"1'})" >> /etc/rdy/usuarios/$user.sh

echo 'echo "'$SIFRAO''$user''pidi'" > /etc/rdy/usuarios/pid'$user >> /etc/rdy/usuarios/$user.sh

echo $user"pid="$SIFRAO"(cat -n /etc/rdy/usuarios/pid$user |awk ' "$SIFRAO"1 > $2 { print "$SIFRAO"NF }')" >> /etc/rdy/usuarios/$user.sh

echo "kill -9 $SIFRAO"$user"pid" >> /etc/rdy/usuarios/$user.sh

echo "fi" >> /etc/rdy/usuarios/$user.sh

mkdir /etc/rdy/tempo 1>/dev/null 2>/dev/null

echo "#!/bin/bash" > /etc/rdy/tempo/$user.sh
echo "bash /etc/rdy/usuarios/"$user".sh" >> /etc/rdy/tempo/$user.sh
echo "sleep 5s" >> /etc/rdy/tempo/$user.sh
echo "bash /etc/rdy/usuarios/"$user".sh" >> /etc/rdy/tempo/$user.sh
echo "sleep 5s" >> /etc/rdy/tempo/$user.sh
echo "bash /etc/rdy/usuarios/"$user".sh" >> /etc/rdy/tempo/$user.sh
echo "sleep 5s" >> /etc/rdy/tempo/$user.sh
echo "bash /etc/rdy/usuarios/"$user".sh" >> /etc/rdy/tempo/$user.sh
echo "sleep 5s" >> /etc/rdy/tempo/$user.sh
echo "bash /etc/rdy/usuarios/"$user".sh" >> /etc/rdy/tempo/$user.sh
echo "sleep 5s" >> /etc/rdy/tempo/$user.sh
echo "bash /etc/rdy/usuarios/"$user".sh" >> /etc/rdy/tempo/$user.sh
echo "sleep 5s" >> /etc/rdy/tempo/$user.sh
echo "bash /etc/rdy/usuarios/"$user".sh" >> /etc/rdy/tempo/$user.sh
echo "sleep 5s" >> /etc/rdy/tempo/$user.sh
echo "bash /etc/rdy/usuarios/"$user".sh" >> /etc/rdy/tempo/$user.sh
echo "sleep 5s" >> /etc/rdy/tempo/$user.sh
echo "bash /etc/rdy/usuarios/"$user".sh" >> /etc/rdy/tempo/$user.sh
echo "sleep 5s" >> /etc/rdy/tempo/$user.sh
echo "bash /etc/rdy/usuarios/"$user".sh" >> /etc/rdy/tempo/$user.sh
echo "sleep 5s" >> /etc/rdy/tempo/$user.sh
echo "bash /etc/rdy/usuarios/"$user".sh" >> /etc/rdy/tempo/$user.sh
echo "sleep 5s" >> /etc/rdy/tempo/$user.sh
echo "bash /etc/rdy/usuarios/"$user".sh" >> /etc/rdy/tempo/$user.sh

echo "$logins" > ${path}limit/$user

echo "*/1 * * * * root bash /etc/rdy/tempo/$user.sh" >> /etc/crontab
echo "#" >> /etc/crontab

##############################



echo -e $DIVIS
echo -e "${green}IP: $cyano$ip$f";
echo -e "${green}USUÁRIO: $cyano$user$f";
echo -e "${green}SENHA: $cyano$password$f";
echo -e "${green}EXPIRA EM: $cyano$rdyx$f";
echo -e "${green}LIMITE: $cyano$logins$f";
echo -e $DIVIS
echo "$password" > ${path}passwords/$user
echo "$rdyw" > ${path}date/$user
echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
RED usermanager
fi

}

##############
RDYNEWUSERTIME(){
echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}GERENCIAMENTO DE USUÁRIOS${blue}/${mag}$NEWUSERTIME$f     $yellow [${blue}v$yellow]$f";
echo -e $DIVIS
echo -ne "${blue}[1/2]${green}Gerar usuário e senha aleatória?$f"; read -p "[s/N]: " -e -i s result
if [[ "$result" = 'v' ]]; then
read -p "Quer mesmo voltar? [s/n]: " esco
if [[ "$esco" = 's' ]]; then
RED
fi
fi
RDY_USER=$(LC_ALL=C tr -dc 'A-Za-z0-9' </dev/urandom | head -c 6 ; echo)
RDY_PASSWORD=$(LC_ALL=C tr -dc 'A-Za-z0-9' </dev/urandom | head -c 6 ; echo)
if [ -d /etc/rdy/rdy_test_users ]
then
echo ""
else
mkdir -p /etc/rdy/rdy_test_users
fi
if [[ "$result" = 's' ]]; then
sleep 0.01
for testus in $(ls /etc/rdy/rdy_test_users |sort |sed 's/.sh//g')
do
echo "$testus"
done
echo -e "${blue}Use s = segundos, m = minutos, h = horas e d = dias $cbranco EX: 14s .$f"
echo -ne "${blue}[2/2]${green}Quanto tempo o usuário ${mag}$RDY_USER$f deve durar? $f"; read -p "" tempoin
tempo=$(echo "$tempoin" |sed 's/ //g')
useradd -M -s /bin/false $RDY_USER
(echo $RDY_PASSWORD;echo $RDY_PASSWORD) |passwd $RDY_USER 1>/dev/null 2>/dev/null
echo "#!/bin/bash
sleep $tempo
kill"' $(ps -u '"$RDY_USER |awk '{print"' $1'"}') 1>/dev/null 2>/dev/null
userdel --force $RDY_USER
rm -rf /etc/rdy/rdy_test_users/$RDY_USER.sh
exit" > /etc/rdy/rdy_test_users/$RDY_USER.sh
echo -e $DIVIS
echo -e "${green}IP: $cyano$ip$f"
echo -e "${green}USUÁRIO: $cyano$user$f"
echo -e "${green}SENHA: $cyano$pass$f"
echo -e "${green}EXPIRA EM: $cyano$tempo$f"
echo -e $DIVIS
echo -e "${mag}Apos o tempo expirar o usuario sera deletado e todos serão desconectados.$f";
bash /etc/rdy/rdy_test_users/$RDY_USER.sh &
echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
RED usermanager
else
for testus in $(ls /etc/rdy/rdy_test_users |sort |sed 's/.sh//g')
do
echo "$testus"
done
printf "\n"
echo -ne "${blue}[1/3]${green}Nome do novo usuario: $f"; read user
if [[ "$user" = 'v' ]]; then
read -p "Quer mesmo voltar? [s/n]: " esco
if [[ "$esco" = 's' ]]; then
RED
fi
fi
echo -ne "${blue}[2/3]${green}Senha para o usuário: $f"; read pass
if [[ "$pass" = 'v' ]]; then
read -p "Quer mesmo voltar? [s/n]: " esco
if [[ "$esco" = 's' ]]; then
RED
fi
fi
echo -e "\n${blue}Use s = segundos, m = minutos, h = horas e d = dias $cbranco EX: 14s .$f";
echo -ne "${blue}[3/3]${green}Tempo de validade:$f"; read -p " " tempoin
if [[ "$tempoin" = 'v' ]]; then
read -p "Quer mesmo voltar? [s/n]: " esco
if [[ "$esco" = 's' ]]; then
RED
fi
fi
tempo=$(echo "$tempoin" |sed 's/ //g')
useradd -M -s /bin/false $user
(echo $pass;echo $pass) |passwd $user 1>/dev/null 2>/dev/null
echo "#!/bin/bash
sleep $tempo
kill"' $(ps -u '"$user |awk '{print"' $1'"}') 1>/dev/null 2>/dev/null
userdel --force $user
rm -rf /etc/rdy/rdy_test_users/$user.sh
exit" > /etc/rdy/rdy_test_users/$user.sh
echo -e $DIVIS
echo -e "${green}IP: $cyano$ip$f";
echo -e "${green}USUÁRIO: $cyano$user$f";
echo -e "${green}SENHA: $cyano$pass$f";
echo -e "${green}EXPIRA EM: $cyano$tempo$f";
echo -e $DIVIS
echo -e "${mag}Apos o tempo expirar o usuario sera deletado e todos serão desconectados.$f";
bash /etc/rdy/rdy_test_users/$user.sh &
echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
RED usermanager
fi
}

####################
RDYDELETEUSER(){
echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}GERENCIAMENTO DE USUÁRIOS${blue}/${mag}$DELETEUSER$f     $yellow [${blue}v$yellow] $yellow=$f$white Voltar$f";
echo -e $DIVIS
echo -ne "${blue}[1/1]${green}Nome do usuário$f"; read -p ": " user
if [[ "$user" = 'v' ]]; then
read -p "Quer mesmo voltar? [s/n]: " esco
if [[ "$esco" = 's' ]]; then
RED
fi
fi
if cat /etc/passwd |grep $user: > /dev/null
then
history -c
else
clear
echo -e "${mag}Usuário ${red}$user${mag} não existe!$f";
echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu...$f"; read -n1 -r -p "";
RDYDELETEUSER
fi
userdel --force $user > /dev/null 2>/dev/null
echo -e "${green}USUÁRIO: $cyano$user ${red}DELETADO!$f";
echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
RED usermanager
}


####################
RDYCHANGELIMIT(){
echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}GERENCIAMENTO DE USUÁRIOS${blue}/${mag}$CHANGELIMIT$f    $yellow [${blue}v$yellow]$f";
echo -e $DIVIS
echo -ne "${blue}[1/2]${green}Nome do usuário$f"; read -p ": " user
if [[ "$user" = 'v' ]]; then
read -p "Quer mesmo voltar? [s/n]: " esco
if [[ "$esco" = 's' ]]; then
RED
fi
fi
 if cat /etc/passwd |grep $user: > /dev/null
then
history -c
 else
echo -e "${mag}Usuário ${red}$user${mag} não existe!$f";
echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu...$f"; read -n1 -r -p "";
RDYCHANGELIMIT
 fi

if cat ${path}limit/$user > /dev/null 2> /dev/null
then
limitatual=$(cat ${path}limit/$user)
else
rdy="Não definido!";
fi
 usercon=$(ps -u $user | grep sshd | wc -l)
 
echo -e "${yellow}Num. de logins atual: ${green}$limitatual$f";
echo -e "${yellow}Num. de conectados: ${green}$usercon$f";
echo "":
echo -ne "${blue}[2/2]${green}Quantidade de logins para ${mag}$user:$f"; read -p ": " logins
  limit $user $logins
echo -e "${green}USUÁRIO: $cyano$user$f";
echo -e "${green}NUM. DE LOGINS DEFINIDO: $cyano$logins$f";
echo -e $DIVIS
echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
RED usermanager
}

######################
RDYCHANGEDATE(){
echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}GERENCIAMENTO DE USUÁRIOS${blue}/${mag}$CHANGEDATE$f     $yellow [${blue}v$yellow]$f";
echo -e $DIVIS
echo -ne "${blue}[1/1]${green}Nome do usuário$f"; read -p ": " user
if [[ "$user" = 'v' ]]; then
read -p "Quer mesmo voltar? [s/n]: " esco
if [[ "$esco" = 's' ]]; then
RED
fi
fi
 if cat /etc/passwd |grep $user: > /dev/null
then
history -c
 else
echo -e "${mag}Usuário ${red}$user${mag} não existe!$f";
echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu...$f"; read -n1 -r -p "";
RDYCHANGEDATE
 fi
echo -e "${blue}Digite os dados para a nova data de expiração$f";
echo -ne "${blue}[1/3]${green}Dia(01-30): $f"; read -p "" dia
if [[ "$dia" = 'v' ]]; then
read -p "Quer mesmo voltar? [s/n]: " esco
if [[ "$esco" = 's' ]]; then
RED
fi
elif [[ "$dia" = '' ]]; then
dia="05";
fi
echo -ne "${blue}[2/3]${green}Mês(01-12): $f"; read -p "" mes
if [[ "$mes" = 'v' ]]; then
read -p "Quer mesmo voltar? [s/n]: " esco
if [[ "$esco" = 's' ]]; then
RED
fi
elif [[ "$mes" = '' ]]; then
mes="10";
fi
echo -ne "${blue}[3/3]${green}Ano(2017-3000): $f"; read -p "" ano
if [[ "$ano" = 'v' ]]; then
read -p "Quer mesmo voltar? [s/n]: " esco
if [[ "$esco" = 's' ]]; then
RED
fi
elif [[ "$ano" = '' ]]; then
ano="2019";
fi

chage -E $ano/$mes/$dia $user 2> /dev/null
echo -e "${green}NOVA DATA DO ${blue}$user$f: ${mag} $dia/$mes/$ano$f";
echo -e $DIVIS
echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
RED usermanager
}
############################################################

RDYCHANGEPASSWORD(){
echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}GERENCIAMENTO DE USUÁRIOS${blue}/${mag}$CHANGEPASSWORD$f     $yellow [${blue}v$yellow]$f";
echo -e $DIVIS
echo -ne "${blue}[1/2]${green}Nome do usuário$f"; read -p ": " user
if [[ "$user" = 'v' ]]; then
read -p "Quer mesmo voltar? [s/n]: " esco
if [[ "$esco" = 's' ]]; then
RED
fi
fi
if cat /etc/passwd |grep $user: > /dev/null
then
echo -ne "${blue}[2/2]${green}Nova senha para o usuário \033[4;35m$user$f"; read -p ": " password
(echo $password; echo $password)|passwd $user 2>/dev/null
echo "$password" > ${path}passwords/$user
echo -e $DIVIS
echo -e "${green}USUÁRIO: $cyano$user$f";
echo -e "${green}SENHA DEFINIDA: $cyano$password$f";
echo -e $DIVIS
echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
RED usermanager
else
echo -e "${mag}Usuário ${red}$user${mag} não existe!$f"
fi
}


RDYREMOVELIMITUSER(){
echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}GERENCIAMENTO DE USUÁRIOS${blue}/${mag}$REMOVELIMITUSER$f";
echo -e $DIVIS
echo -ne "${blue}[1/1]${green}Nome do usuário$f"; read -p ": " user
if [[ "$user" = 'v' ]]; then
read -p "Quer mesmo voltar? [s/n]: " esco
if [[ "$esco" = 's' ]]; then
RED
fi
fi
 if cat /etc/passwd |grep $user: > /dev/null
then
cronsemuser=$(cat /etc/crontab |grep -v "#$user#")
echo "$cronsemuser" > /etc/crontab
rm -rf ${path}limit/$user 2>/dev/null
rm -rf ${path}limit/$user.sh 2>/dev/null
pids=$(ps x |grep "#$user#" |awk {'print $1'})
kill $pids 2>/dev/null
kill "$pids" 2>/dev/null
kill -9 `ps x |grep "#$user#" |awk {'print $1'}` 2>/dev/null
kill `ps x |grep "#$user#" |awk {'print $1'}` 2>/dev/null
echo -e $DIVIS
echo -e "${green}LIMTE DO USUÁRIO $cyano$user ${red}REMOVIDO!$f"
echo -e $DIVIS
echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
RED usermanager
 else
echo -e "${mag}Usuário ${red}$user${mag} não existe!$f"
echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu...$f"; read -n1 -r -p "";
RDYREMOVELIMITUSER
 fi
}
##############

RDYDELETEEXPIREDUSERS(){
echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}GERENCIAMENTO DE USUÁRIOS${blue}/${mag}$DELETEEXPIREDUSERS$f    $yellow [${blue}v$yellow]$f";
echo -e $DIVIS
echo -e "${white}(${mag}<${green}i${mag}>${white})    ${blue}Ao continuar, você irá remover todos os usuários expirados do seu servidor.$f";
echo -ne "${white}//${yellow}//${green}//${mag}//    ${yellow}CONTINUAR COM A OPERAÇÃO?$f"; read -p " [s/n]: " -e -i s yesNo
if [[ "$yesNo" = 'v' ]]; then
read -p "Quer mesmo voltar? [s/n]: " esco
if [[ "$esco" = 's' ]]; then
RED
fi
elif [[ "$yesNo" = 's' ]]; then
history -c
else
RED
fi
datahoje=$(date +%s)
for user in $(cat /etc/passwd |grep -v "nobody" |awk -F : '$3 > 900 {print $1}')
do
dataexp=$(chage -l $user |grep "Account expires" |awk -F : '{print $2}')
if [[ $dataexp == ' never' ]]; then
id > /dev/null 2>/dev/null
else
dataexpn=$(date -d"$dataexp" '+%d/%m/%Y')
dataexpnum=$(date '+%s' -d"$dataexp")
fi
if [[ $dataexpnum < $datahoje ]]; then
printf "$red "
printf '%-41s' $user
printf "$f"
echo -e "${white}//${yellow}//${green}//${mag}//    ${yellow}DELETADO$f";
kill $(ps -u $user |awk '{print $1}') >/dev/null 2>/dev/null ; userdel $user
else
printf "$green "
printf '%-41s' $user
printf "$f"
echo $dataexpn
fi
done
echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu...$f"; read -n1 -r -p "";
RED usermanager
}

##############
RDYUSERDETAILS(){

rdyallusers(){
echo -e "${white}  USUÁRIO               SENHA               EXPIRA         LOGINS$f"
echo -e "$blue--------------------------------------------------------------------$f"
for users in `awk -F : '$3 > 900 { print $1 }' /etc/passwd |grep -v "nobody" |grep -vi polkitd |grep -vi system-`
do

if cat ${path}limit/$users > /dev/null 2> /dev/null
then
limitecs=$(cat ${path}limit/$users)
else
limitecs="?"
fi

if  senha=$(cat ${path}passwords/$users > /dev/null 2> /dev/null)
then
senha=$(cat ${path}passwords/$users)
else
senha="?"
fi

data=$(chage -l $users |grep -i co |awk -F : '{print $2}')
if [ $data = never ] 2> /dev/null
then
data="?"
fi
rdydata=$(printf '%-18s' "$data")
rdylimit=$(printf '%-10s' "$limitecs")
rdyuser=$(printf ' %-21s' "$users")
rdypass=$(printf '%-18s' "$senha")
echo -e "${green} $rdyuser ${mag}$rdypass ${blue}$rdydata ${yellow}$rdylimit$f"
echo -e "${blue}--------------------------------------------------------------------$f"
done
echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu...$f"; read -n1 -r -p "";
RED usermanager
}


echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}GERENCIAMENTO DE USUÁRIOS${blue}/${mag}$USERDETAILS$f    $yellow [${blue}v$yellow]$f";
echo -e $DIVIS
echo -ne "${white}//${yellow}//${green}//${mag}//    ${yellow}LISTAR USUÁRIO ESPECÍFICO?$f"; read -p " [s/n]: " -e -i n yesNo
echo "";
if [[ "$yesNo" = 'v' ]]; then
read -p "Quer mesmo voltar? [s/n]: " esco
if [[ "$esco" = 's' ]]; then
RED
fi
elif [[ "$yesNo" = 's' ]]; then

echo -ne "${blue}[1/1]${green}Nome do usuário$f"; read -p ": " user
echo -e $DIVIS
 if cat /etc/passwd |grep $user: > /dev/null
then
history -c
 else
echo -e "${mag}Usuário ${red}$user${mag} não existe!$f";
echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar...$f"; read -n1 -r -p "";
RDYUSERDETAILS
 fi
 

if cat ${path}limit/$users > /dev/null 2> /dev/null
then
limitecs=$(cat ${path}limit/$user)
else
limitecs="?"
fi

if  senha=$(cat ${path}passwords/$user > /dev/null 2> /dev/null)
then
senha=$(cat ${path}passwords/$user)
else
senha="?"
fi

data=$(chage -l $user |grep -i co |awk -F : '{print $2}')
if [ $data = never ] 2> /dev/null
then
data="?"
fi
rdydata=$(printf '%-18s' "$data")
rdylimit=$(printf '%-10s' "$limitecs")
rdyuser=$(printf ' %-21s' "$user")
rdypass=$(printf '%-18s' "$senha")
echo -e "$cbranco  USUÁRIO               SENHA               EXPIRA         LOGINS$f"
echo -e "$blue --------------------------------------------------------------------$f"
echo -e "${green} $rdyuser ${mag}$rdypass ${blue}$rdydata ${yellow}$rdylimit$f"
echo -e "$blue --------------------------------------------------------------------$f"
echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu...$f"; read -n1 -r -p "";
RED usermanager
elif [[ "$yesNo" = 'n' ]]; then
rdyallusers
else
rdyallusers
fi

}


RDYDISCONNECTUSER(){
echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}GERENCIAMENTO DE USUÁRIOS${blue}/${mag}$DISCONNECTUSER$f";
echo -e $DIVIS
echo -ne "${blue}[1/1]${green}Nome do usuário$f"; read -p ": " user
if [[ "$user" = 'v' ]]; then
read -p "Quer mesmo voltar? [s/n]: " esco
if [[ "$esco" = 's' ]]; then
RED
fi
fi
echo -e $DIVIS
 if cat /etc/passwd |grep $user: > /dev/null
then
pkill -9 -u $user
echo -e "${green}USUÁRIO $cyano$user ${red}DESCONECTADO!$f"
echo -e $DIVIS
echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu...$f"; read -n1 -r -p "";
RED usermanager
 else
echo -e "${mag}Usuário ${red}$user${mag} não existe!$f";
echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar...$f"; read -n1 -r -p "";
RDYDISCONNECTUSER
 fi
}

RDYUSERMONITOR(){
clear
while true; do
echo ""
echo -e "${mag}                Para $EXIT, tecle Ctrl + c                    $f";
echo -e "${mag}|---------------------------------------------------------|$f";
echo -e "\033[45;1;37m   Usuário                :               Conexão/Limite   $f";
echo -e "${mag}|---------------------------------------------------------|$f";
        for usur in `awk -F : '$3 > 900 { print $1 }' /etc/passwd |grep -v "nobody" |grep -vi polkitd |grep -vi systemd-[a-z] |grep -vi systemd-[0-9]`; do
	usurnum=$(ps -u $usur |grep sshd |wc -l)
if cat ${path}limit/$usur > /dev/null 2> /dev/null
then
rdy=$(cat ${path}limit/$usur)
else
rdy="?"
fi
echo -e "${yellow}     $(printf '%-42s%s' $usur $usurnum/$rdy) $f";
echo -e "${mag}|---------------------------------------------------------|$f";
        done
sleep 5s
clear
done
}

RDYBACKUPUSERS(){
echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}GERENCIAMENTO DE USUÁRIOS${blue}/${mag}$BACKUPUSERS$f";
echo -e $DIVIS
echo -ne "${blue}[1/1]${green}Nome para o arquivo de backup$f"; read -p "(Ex: backupServerBr002): " file

current_date_time="`date +%d-%m-%Y-%H:%M:%S`";

if [[ "$file" = 'v' ]]; then
read -p "Quer mesmo voltar? [s/n]: " esco
if [[ "$esco" = 's' ]]; then
RED
fi
elif [[ "$file" = '' ]]; then
RED
fi

echo -e "${white}//${yellow}//${green}//${mag}//    ${blue}GERANDO BACKUP ${mag}${file}_$current_date_time ${green}AGUARDE...$f";
sleep 2 & RDYSPINNER

for user in `awk -F : '$3 > 900 { print $1 }' /etc/passwd |grep -v "nobody" |grep -vi polkitd |grep -vi systemd-[a-z] |grep -vi systemd-[0-9]`
do

if [ -e ${path}passwords/$user ];
then
passrdy=$(cat ${path}passwords/$user)
else
passrdy="rdysoftware";
fi

if [ -e ${path}limit/$user ]
then
limite=$(cat ${path}limit/$user)
date=$(cat ${path}date/$user)
echo -e "00:$ip:$user:$passrdy:$limite:$date:@rdysoftware" >> ${path}backups/${file}_$current_date_time & RDYSPINNER
else
echo -e "00:$ip:$user:$passrdy:100:2018/12/23:@rdysoftware" >> ${path}backups/${file}_$current_date_time & RDYSPINNER
fi
done
echo -e "${green}BACKUP CONCLUÍDO! $f";
echo -e "${green}SALVO EM ${mag}${path}backups/${file}_$current_date_time $f";
echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar...$f"; read -n1 -r -p "";
RED usermanager
}

RDYRESTOREBACKUP(){

echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}GERENCIAMENTO DE USUÁRIOS${blue}/${mag}$RESTOREBACKUP$f";
echo -e $DIVIS
echo -e "${blue}[1/1]${green}Diretório e nome arquivo de backup$f";
read -p "(Ex: ${path}backups/backupServerBr*): " -e -i ${path}backups/ file

if [[ "$file" = 'v' ]]; then
read -p "Quer mesmo voltar? [s/n]: " esco
if [[ "$esco" = 's' ]]; then
RED
fi
elif [[ "$file" = '' ]]; then
RED
fi

for user in `cat $file`
do
usuario=$(echo "$user" |awk -F : '{print $3}')
senha=$(echo "$user" |awk -F : '{print $4}')
if cat /etc/passwd |grep $usuario: 1> /dev/null 2>/dev/null
then
echo " " > /dev/null
else
echo "$user" |cut -d: -f3 1> /dev/null 2>/dev/null
  if [ $? = 0 ]
  then
  limite=$(echo "$user" |awk -F : '{print $5}')
   data=$(echo "$user" |awk -F : '{print $6}')
  useradd -M -s /bin/false $usuario
  (echo $senha ; echo $senha) | passwd $usuario > /dev/null 2> /dev/null
  limit $usuario $limite 1> /dev/null 2> /dev/null
  echo "$senha" > ${path}passwords/$usuario
  chage -E $data $usuario 2> /dev/null
  chage -W 3 $usuario 2> /dev/null
echo "$usuario" > ${path}date/$usuario
  else
  useradd -M -s /bin/false $usuario
  (echo $senha ; echo $senha) | passwd $usuario > /dev/null 2> /dev/null
  echo "$senha" > ${path}passwords/$usuario
  fi
echo -e "${green}OPERAÇÃO CONCLUÍDA! $f";
fi
done
echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar...$f"; read -n1 -r -p "";
RED usermanager
}





RDYUSERMANAGER(){
clear
echo -e $DIVIS
echo -e "${HEADER}";
echo -e $DIVIS
echo -e "$green $yellow />$blue 01 $yellow= $f$white$NEWUSER  $f";
echo -e "$green $yellow />$blue 02 $yellow= $f$white$NEWUSERTIME $blue $f";
echo -e "$green $yellow />$blue 03 $yellow= $f$white$DELETEUSER  $f";
echo -e "$green $yellow />$blue 04 $yellow= $f$white$CHANGELIMIT  $f";
echo -e "$green $yellow />$blue 05 $yellow= $f$white$CHANGEDATE  $f";
echo -e "$green $yellow />$blue 06 $yellow= $f$white$CHANGEPASSWORD $f";
echo -e "$green $yellow />$blue 07 $yellow= $f$white$DELETEEXPIREDUSERS $f";
echo -e "$green $yellow />$blue 08 $yellow= $f$white$REMOVELIMITUSER $f";
echo -e "$green $yellow />$blue 09 $yellow= $f$white$USERDETAILS $f";
echo -e "$green $yellow />$blue 10 $yellow= $f$white$DISCONNECTUSER $f";
echo -e "$green $yellow />$blue 11 $yellow= $f$white$USERMONITOR $f";
echo -e "$green $yellow />$blue 12 $yellow= $f$white$BACKUPUSERS $f";
echo -e "$green $yellow />$blue 13 $yellow= $f$white$RESTOREBACKUP $f";
echo -e "$green $yellow />$blue 00 $yellow= $f$white$EXIT $f";
echo -e $DIVIS
echo -ne "$cyano $typeoption [01-13, v] $f"; read -p "/> " option
case $option in

i | I ) echo -e "${white}//${yellow}//${green}//${mag}//    ${green}$OP_NOT_DEVELOPED$f";
RED usermanager;;
v | back | voltar | anterior | antes | an ) RDYMENU;;
1 | 01) RDYNEWUSER ;;
2 | 02) RDYNEWUSERTIME ;;
3 | 03) RDYDELETEUSER ;;
4 | 04) RDYCHANGELIMIT ;;
5 | 05) RDYCHANGEDATE ;;
6 | 06) RDYCHANGEPASSWORD ;;
7 | 07) RDYDELETEEXPIREDUSERS ;;
8 | 08) RDYREMOVELIMITUSER ;;
9 | 09) RDYUSERDETAILS ;;
10) RDYDISCONNECTUSER ;;
11) RDYUSERMONITOR ;;
12) RDYBACKUPUSERS ;;
13) RDYRESTOREBACKUP ;;
0 | 00) exit ;;
 *) echo "$unkop" ; echo "" ; sleep 2 ; bash main ;;
   esac
   
   }
   
   RDYUSERMANAGER